//frontend
//1.app.js
import React from 'react';
import { createBrowserRouter,RouterProvider } from 'react-router-dom';
import Home from './fullpro/Root/Home';
import Login from './fullpro/Authenticate/Login';
import Register from './fullpro/Authenticate/Register';
import Root from './fullpro/Root/Root';
import Errorele from './fullpro/Root/Errorele';
import Userdash from './fullpro/Welcome/Userdash';
import Postlist from './fullpro/Welcome/Postlist';
import Createpost from './fullpro/Welcome/Createpost';
import AuthLay from './fullpro/Welcome/AuthLay';
function App() {
  let router = createBrowserRouter([
    {
      path: "",
      element: <Root />,
      errorElement: <Errorele />,
      children: [
        {
          path: "",
          element: <Home />
        },
        {
          path: "login",
          element: <Login />
        },
        {
          path: "register",
          element: <Register />
        }
      ]
    },
    {
      path: "",
      element: <AuthLay />,
      errorElement: <Errorele />,
      children: [
        {
          path: "user-dashboard/:name",
          element: <Userdash />
        },
        {
          path: "posts",
          element: <Postlist />
        },
        {
          path: "create-post",
          element: <Createpost />
        }
      ]
    }
  ]);

  return (
    <div>
      <RouterProvider router={router} />
    </div>
  );
}
export default App;

//2.root folder
//error element
import './Route.css';
import '../../Styles.css';
function Errorele(){
    return(
        <div className='x'>
            <p>uifskdfsdfsjnfuds</p>
            <p>error has occurred</p>
        </div>
    )
}
export default Errorele;

//footer
import '../../Styles.css';
import React from 'react';
import './Route.css';

function Footer() {
    return (
        <footer className='footer'>
            <p> 2024 My Website. All Rights Reserved.</p>
        </footer>
    );
}

export default Footer;


//header before login
import { Link } from 'react-router-dom';
import React from 'react';
import './Route.css';
import '../../Styles.css';
function Head() {
  return (
    <nav className="navbar navbar-expand-lg navbar-light bg-light">
      <Link to="/" className="navbar-brand">Blog</Link>
      <div className="collapse navbar-collapse">
        <ul className="navbar-nav ml-auto">
          <li className="nav-item">
            <Link to="/" className="nav-link">Home</Link>
          </li>
          <li className="nav-item">
            <Link to="/login" className="nav-link">Login</Link>
          </li>
          <li className="nav-item">
            <Link to="/register" className="nav-link">Register</Link>
          </li>
        </ul>
      </div>
    </nav>
  );
}

export default Head;


//root and home elements
import React from 'react';
import './Route.css';
import '../../Styles.css';
function Home() {
  return (
    <div className="home-container">
      <h1>Welcome to the Blog</h1>
      <p>Your source for the latest articles and news</p>
    </div>
  );
}

export default Home;


import React from 'react';
import { Outlet } from 'react-router-dom';
import Head from './Head';
import Footer from './Footer';
import 'bootstrap/dist/css/bootstrap.min.css';
import '../../Styles.css';
function Root() {
  return (
    <div>
      <Head />
      <div className="container mt-4">
        <Outlet />
      </div>
      <Footer />
    </div>
  );
}

export default Root;


//authentication
import React from 'react';
import { useForm } from 'react-hook-form';
import { Link, useNavigate } from 'react-router-dom';
import './Authenticate.css';
import axios from 'axios';
import '../../Styles.css';
function Register() {
  const { register, handleSubmit, formState: { errors } } = useForm();
  const navigate = useNavigate();

  const onSubmit = async (data) => {
    try {
      const response = await axios.post(`http://localhost:4000/users`, data);
      if (response.status === 201) {
        navigate('/login');
      }
    } catch (err) {
      console.error("Error in Signup: ", err);
      alert('An error occurred during registration. Please try again.');
    }
  };

  return (
    <div className="form-container">
      <form onSubmit={handleSubmit(onSubmit)}>
        <h1>User Registration</h1>
        <p>All fields are mandatory</p>
        <div className="form-group">
          <label htmlFor="name">Name</label>
          <input type="text" id="name" className="form-control" {...register('name', { required: true, minLength: 4 })} />
          {errors.name && <p className="error-message">Minimum 4 characters</p>}
        </div>
        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input type="email" id="email" className="form-control" {...register('email', { required: true })} />
          {errors.email && <p className="error-message">Email is required</p>}
        </div>
        <div className="form-group">
          <label htmlFor="password">Password</label>
          <input type="password" id="password" className="form-control" {...register('password', { required: true, minLength: 4 })} />
          {errors.password && <p className="error-message">Minimum 4 characters</p>}
        </div>
        <button type="submit" className="btn btn-success">Submit</button>
        <p>Already registered? <Link to="/login">Login</Link></p>
      </form>
    </div>
  );
}

export default Register;


import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { Link, useNavigate } from 'react-router-dom';
import './Authenticate.css';
import axios from 'axios';
import '../../Styles.css';

function Login() {
  const { register, handleSubmit, formState: { errors } } = useForm();
  const navigate = useNavigate();
  const [errorMessage, setErrorMessage] = useState('');

  const handleLogin = async (data) => {
    try {
      const response = await axios.get(`http://localhost:4000/users?email=${data.email}`);
      const user = response.data[0];
      if (!user) {
        alert("Invalid Email");
      } else if (data.password === user.password) {
        // Save user session (e.g., in localStorage, context, etc.)
        localStorage.setItem('user', JSON.stringify(user));
        navigate(`/user-dashboard/${user.name}`, { state: user });
      } else {
        setErrorMessage('Incorrect Password');
      }
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <div className="form-container">
      <form onSubmit={handleSubmit(handleLogin)}>
        <h1>Login</h1>
        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input type="email" id="email" className="form-control" {...register('email', { required: true })} />
          {errors.email && <p className="error-message">Email is required</p>}
        </div>
        <div className="form-group">
          <label htmlFor="password">Password</label>
          <input type="password" id="password" className="form-control" {...register('password', { required: true })} />
          {errors.password && <p className="error-message">Password is required</p>}
          {errorMessage && <p className="text-danger mt-2">{errorMessage}</p>}
        </div>
        <button type="submit" className="btn btn-primary">Login</button>
        <p>Want to register? <Link to="/register">Register</Link></p>
      </form>
    </div>
  );
}

export default Login;


//after login:
//header

import React from 'react';
import { Outlet, Link, useNavigate } from 'react-router-dom';
import '../../Styles.css';
import './Welcome.css';
import Footer from '../Root/Footer';
function AuthLay() {
  const navigate = useNavigate();

  const handleLogout = () => {
    // Perform any logout logic here (e.g., clearing tokens, state)
    localStorage.removeItem('user');
    navigate('/login');
  };

  return (
    <div>
      <nav className="navbar">
        <Link to="/" className="navbar-brand">Blog</Link>
        <ul className="nav-links">
          <li className="nav-item">
            <Link to="/user-dashboard" className="nav-link">Dashboard</Link>
          </li>
          <li className="nav-item">
            <Link to="/posts" className="nav-link">Posts</Link>
          </li>
          <li className="nav-item">
            <Link to="/create-post" className="nav-link">Create Post</Link>
          </li>
          <li className="nav-item">
            <button onClick={handleLogout} className="nav-link btn btn-link">Logout</button>
          </li>
        </ul>
      </nav>
      <Outlet />
      <Footer/>
    </div>
  );
}

export default AuthLay;


//user dashboard
import React from 'react';
import { useLocation } from 'react-router-dom';
import '../../Styles.css';
import './Welcome.css';

function Userdash() {
  const { state } = useLocation();
  const user = state || JSON.parse(localStorage.getItem('user'));

  return (
    <div className='text-end m-4'>
      <p className='lead fs-3 text-info'>Welcome, <span className='text-danger fs-1'>{user.name}</span></p>
      <p className='lead'>{user.email}</p>
    </div>
  );
}

export default Userdash;


//creating post
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';
import '../../Styles.css';
import './Welcome.css';

const Createpost = () => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [author, setAuthor] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(`http://localhost:4000/posts`, { title, content, author });
      console.log(response.data);
      setTitle('');
      setContent('');
      setAuthor('');
      navigate('/posts');
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="container mt-4">
      <h2>Create Post</h2>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>Title</label>
          <input type="text" className="form-control" value={title} onChange={(e) => setTitle(e.target.value)} />
        </div>
        <div className="form-group">
          <label>Content</label>
          <textarea className="form-control" value={content} onChange={(e) => setContent(e.target.value)} />
        </div>
        <div className="form-group">
          <label>Author</label>
          <input type="text" className="form-control" value={author} onChange={(e) => setAuthor(e.target.value)} />
        </div>
        <button type="submit" className="btn btn-primary mt-2">Create Post</button>
      </form>
    </div>
  );
};

export default Createpost;


//list of posts
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import 'bootstrap/dist/css/bootstrap.min.css';
import '../../Styles.css';
import './Welcome.css';

const Postlist = () => {
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    axios.get(`http://localhost:4000/posts`)
      .then(response => setPosts(response.data))
      .catch(error => console.error(error));
  }, []);

  return (
    <div className="container mt-4">
      <h1>Blog Posts</h1>
      {posts.map(post => (
        <div key={post._id} className="card mb-4">
          <div className="card-body">
            <h2 className="card-title">{post.title}</h2>
            <p className="card-text">{post.content}</p>
            <p className="card-text"><small className="text-muted">Author: {post.author}</small></p>
          </div>
        </div>
      ))}
    </div>
  );
};

export default Postlist;


//styles:
/* styles.css */

body {
  font-family: 'Montserrat', sans-serif;
  background: #f4f4f4;
  color: #333;
  margin: 0;
  padding: 0;
}

h1, h2, h3, h4, h5, h6 {
  color: #333;
  font-weight: 700;
}

p {
  line-height: 1.6;
  font-size: 1rem;
  color: #666;
}

a {
  text-decoration: none;
  color: #3498db;
  transition: color 0.3s ease;
}

a:hover {
  color: #2980b9;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 2rem;
}

.text-center {
  text-align: center;
}

.lead {
  font-size: 1.25rem;
  font-weight: 300;
  color: #444;
}

.btn {
  display: inline-block;
  padding: 0.85rem 1.5rem;
  border-radius: 8px;
  font-weight: 700;
  transition: background-color 0.3s ease, transform 0.3s ease;
  text-align: center;
}

.btn-primary {
  background-color: #3498db;
  border: none;
  color: #fff;
}

.btn-primary:hover {
  background-color: #2980b9;
  transform: translateY(-2px);
}

.btn-secondary {
  background-color: #95a5a6;
  border: none;
  color: #fff;
}

.btn-secondary:hover {
  background-color: #7f8c8d;
  transform: translateY(-2px);
}

.mt-2 {
  margin-top: 2rem;
}

.mb-2 {
  margin-bottom: 2rem;
}

.mt-4 {
  margin-top: 4rem;
}

.mb-4 {
  margin-bottom: 4rem;
}

.shadow {
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}


/* Authenticate.css */

.form-container {
  background: linear-gradient(135deg, #ff9a9e 0%, #fad0c4 99%, #fad0c4 100%);
  padding: 3rem;
  border-radius: 15px;
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
  max-width: 450px;
  margin: 5rem auto;
  color: #fff;
}

.form-container h1 {
  text-align: center;
  margin-bottom: 2rem;
  color: #fff;
  font-weight: 700;
  font-size: 2rem;
}

.form-group {
  margin-bottom: 1.75rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: #fff;
}

.form-group input {
  width: 100%;
  padding: 0.85rem;
  border-radius: 8px;
  border: none;
  font-size: 1rem;
  background-color: #fff;
  color: #333;
}

.btn-primary, .btn-success {
  width: 100%;
  padding: 0.85rem;
  border: none;
  border-radius: 8px;
  font-weight: 700;
  transition: background-color 0.3s ease, transform 0.3s ease;
  font-size: 1.1rem;
  margin-top: 1rem;
}

.btn-primary {
  background-color: #ff6b6b;
}

.btn-success {
  background-color: #51cf66;
}

.btn-primary:hover, .btn-success:hover {
  background-color: #ff4757;
  transform: translateY(-2px);
}

.error-message {
  color: #e74c3c;
  margin-top: 0.75rem;
  font-size: 0.9rem;
  text-align: center;
}

.text-center {
  text-align: center;
}

.nav-link {
  color: #fff !important;
  font-weight: bold;
  text-decoration: none;
}

.nav-link:hover {
  color: #ddd !important;
}


/* Route.css/

.navbar {
  background: linear-gradient(135deg, #ff6b6b, #ffcc00);
  padding: 1rem 2rem;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  position: fixed;
  width: 100%;
  z-index: 10;
  transition: background 0.5s ease;
}

.navbar .navbar-brand, .navbar .nav-link {
  color: #fff;
  margin-right: 1.5rem;
  transition: color 0.3s ease, transform 0.3s ease;
  font-weight: 700;
  font-size: 1.2rem;
}

.navbar .navbar-brand:hover, .navbar .nav-link:hover {
  color: #2c3e50;
  transform: scale(1.1);
}

.footer {
  background-color: #1c1c1c;
  color: #fff;
  text-align: center;
  padding: 1rem 0;
  position: absolute;
  width: 100%;
  bottom: 0;
  box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.1);
}

.footer p {
  margin: 0;
  font-size: 0.9rem;
  font-weight: 500;
}

.x {
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: #fff;
  padding: 2.5rem;
  border-radius: 15px;
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
}

.error-message {
  color: #e74c3c;
  margin-top: 1.25rem;
  font-size: 1.2rem;
  text-align: center;
}


/* Welcome.css */

.welcome-container {
  background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
  color: #fff;
  padding: 3rem;
  border-radius: 15px;
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
  margin: 3rem 0;
}

.welcome-container h1 {
  text-align: center;
  margin-bottom: 2rem;
  color: #fff;
  font-weight: 700;
  font-size: 2rem;
}

.welcome-container p {
  text-align: center;
  font-size: 1.1rem;
  color: #eee;
}

.card {
  border: none;
  border-radius: 15px;
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
  margin-bottom: 2.5rem;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 16px 32px rgba(0, 0, 0, 0.2);
}

.card-header {
  background: #3498db;
  color: #fff;
  padding: 1.25rem;
  border-top-left-radius: 15px;
  border-top-right-radius: 15px;
  font-weight: 700;
}

.card-body {
  padding: 1.75rem;
}

.btn-primary {
  background-color: #3498db;
  border: none;
  border-radius: 8px;
  padding: 0.85rem 1.5rem;
  font-weight: 700;
  color: #fff;
  transition: background-color 0.3s ease, transform 0.3s ease;
}

.btn-primary:hover {
  background-color: #2980b9;
  transform: translateY(-2px);
}

.nav-links{
  display: flex;
  list-style: none;
}

.container {
  background-color: #ffffff;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  max-width: 600px;
  margin: 2rem auto;
}

h2 {
  text-align: center;
  color: #333;
  margin-bottom: 1.5rem;
  font-weight: 600;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  font-size: 1rem;
  font-weight: 600;
  color: #333;
  margin-bottom: 0.5rem;
}

.form-control {
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 0.5rem;
  font-size: 1rem;
  transition: border-color 0.3s ease;
}

.form-control:focus {
  border-color: #007bff;
  box-shadow: 0 0 5px rgba(0, 123, 255, 0.25);
}


.btn {
  display: block;
  width: 100%;
  padding: 0.75rem;
  font-size: 1rem;
  font-weight: 600;
  text-align: center;
  border-radius: 4px;
}

textarea.form-control {
  height: 150px;
  resize: vertical;
}

//backend:
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/blogdb', { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('Failed to connect to MongoDB', err));

const userSchema = new mongoose.Schema({
    name: String,
    email: String,
    password: String,
    role: String,
});

const postSchema = new mongoose.Schema({
    title: String,
    content: String,
    author: String,
});

const User = mongoose.model('User', userSchema);
const Post = mongoose.model('Post', postSchema);

// User registration
app.post('/users', async (req, res) => {
    try {
      const { name, email, password } = req.body;
      if (!name || !email || !password) {
        return res.status(400).send({ error: 'All fields are required' });
      }
      const user = new User({ name, email, password });
      await user.save();
      res.status(201).send(user);
    } catch (error) {
      console.error(error);
      res.status(500).send({ error: 'Internal Server Error' });
    }
  });
  

// User login
app.get('/users', async (req, res) => {
    const { email } = req.query;
    try {
        const user = await User.findOne({ email });
        if (user) res.send([user]);
        else res.send([]);
    } catch (err) {
        res.status(500).send(err);
    }
});

// Create post
app.post('/posts', async (req, res) => {
    try {
        const post = new Post(req.body);
        await post.save();
        res.status(201).send(post);
    } catch (err) {
        res.status(400).send(err);
    }
});

// Get posts
app.get('/posts', async (req, res) => {
    try {
        const posts = await Post.find();
        res.send(posts);
    } catch (err) {
        res.status(500).send(err);
    }
});

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));


